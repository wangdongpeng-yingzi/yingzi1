                             第六天

（一）能够掌握 watch 侦听器的基本使用？
  <input type="text" v-model="name">
data(){
    return{
      name:''
    }
  },
  watch:{
name(newVal,oldVal){
console.log(newVal,oldVal);
}}

watch:{
async name(newVal,oldVal){
console.log(newVal,oldVal)
const res=await axios.get('https://www.escook.cn/api/finduser/'+newVal)
console.log(res);
}
immediate选项：默认情况下，组件在初次加载完毕后不会调用 watch 侦听器。如果想让 watch 侦听器立即被调用，则需要使用 immediate 选项。
当 watch 侦听的是一个对象，如果对象中的属性值发生了变化，则无法被监听到。此时需要使用 deep 选项，data数据外面包裹一个组。
 计算属性 vs 侦听器
计算属性和侦听器侧重的应用场景不同：
计算属性侧重于监听多个值的变化，最终计算并返回一个新值
侦听器侧重于监听单个数据的变化，最终执行特定的业务处理，不需要有任何返回值

（二）能够知道 vue 中常用的生命周期函数？
组件的生命周期指的是：组件从创建 -> 运行（渲染） -> 销毁的整个过程，强调的是一个时间段。
开始-->import导入组件-->components注册组件-->以标签形式使用组件-->在内存中创建组件的实例对象-->把创建的组件实例渲染在页面上-->组件切换时销毁需要被隐藏的组件-->结束
vue 框架为组件内置了不同时刻的生命周期函数，生命周期函数会伴随着组件的运行而自动调用。例如：
① 当组件在内存中被创建完毕之后，会自动调用 created 函数
② 当组件被成功的渲染到页面上之后，会自动调用 mounted 函数
③ 当组件被销毁完毕之后，会自动调用 unmounted 函数
 如何监听组件的更新
当组件的 data 数据更新之后，vue 会自动重新渲染组件的 DOM 结构，从而保证 View 视图展示的数据和
Model 数据源保持一致。
当组件被重新渲染完毕之后，会自动调用 updated 生命周期函数。
https://www.vue3js.cn/docs/zh/guide/instance.html# //生命周期函数
生命周期函数   执行时机                      所属阶段 执行次数    应用场景
created        组件在内存中创建完毕后        创建阶段 唯一1次     发 ajax 请求初始数据
mounted        组件初次在页面中渲染完毕后    创建阶段 唯一1次     操作 DOM 元素
updated        组件在页面中被重新渲染完毕后  运行阶段 0 或 多次 
unmounted      组件被销毁后（页面和内存）    销毁阶段 唯一1次
beforeCreate   在内存中开始创建组件之前      创建阶段 唯一1次 
created        组件在内存中创建完毕后        创建阶段 唯一1次       发 ajax 请求初始数据
beforeMount    在把组件初次渲染到页面之前    创建阶段 唯一1次 
mounted        组件初次在页面中渲染完毕后    创建阶段 唯一1次        操作 DOM 元素
beforeUpdate   在组件被重新渲染之前          运行阶段 0 或 多次 
updated        组件在页面中被重新渲染完毕后  运行阶段 0 或 多次 
beforeUnmount  在组件被销毁之前              销毁阶段 唯一1次 
unmounted      组件被销毁后（页面和内存）    销毁阶段 唯一1次

（三）能够知道如何实现组件之间的数据共享？
1.父组件data数据传给子组件
父组件通过 v-bind 属性绑定向子组件共享数据。同时，子组件需要使用 props 接收数据。
父组件代码：<template>
<todo :msg="userinfo.nmae" :use="userinfo.age"></todo>
</template>
<script>
  import todo from './components/todo.list/todo/todo.vue'
export default {
  name: 'MyApp',
  data(){
    return{
    message:'hollow',
    userinfo:{nmae:'zs',age:20}
    }
  },
  components:{
    todo
  }
}
子组件：<template>
<div>zi</div>
<p>{{use}}</p>
<p>{{msg}}</p>
</template>
<script>
export default {
props:['use','msg']
}
</script>
2.子组件data数据传给父组件
子组件通过自定义事件的方式向父组件共享数据。
父组件代码：<template>
<todo :num="num" @sumchang="get"></todo>
</template>
<script>
import todo from './components/todo.list/todo/todo.vue'
export default {
  name: 'MyApp',
  data(){
    return{
      num:12,
    message:'hollow',
    userinfo:{nmae:'zs',age:20}
    }
  },
  methods:{
 get(num){
  this.num=num
 }
  },
  components:{
    todo
  }
}
子组件代码：<template>
<div>zi</div>
<p>{{use}}</p>
<p>{{msg}}</p>
<p>{{num}}</p>
<button @click="add"></button>
</template>
<script>

export default {
props:['use','msg','num'],
emits:['sumchang'],
methods:{
  add(){
    this.$emit('sumchang',this.num+1)
  }
}
}
</script>
v-model：双向绑定数据
父组件：<template>
  <p>{{num}}</p>
<todo v-model:num="num"></todo>
</template>
<script>
import todo from './components/todo.list/todo/todo.vue'
export default {
  name: 'MyApp',
  data(){
    return{
      num:12,
    message:'hollow',
    userinfo:{nmae:'zs',age:20}
    }
  },
  components:{
    todo
  }
}
子组件：<template>
<div>zi</div>
<p>{{use}}</p>
<p>{{msg}}</p>
<p>{{num}}</p>
<button @click="add"></button>
</template>
<script>
export default {
props:['use','msg','num'],
emits:['update:num'],
methods:{
  add(){
    this.$emit('update:num',this.num+1)
  }
}
}
</script>
兄弟组件传输数据
npm i mitt 下载一个包
新建一个文件mitt 文件下建一个EventBus.js
import mitt from 'mitt'
const bus = mitt()
export default bus
一个组件：<template>
  <p>{{count}}</p>
</template>

<script>
  import bus from "./EventBus.js"
export default {
data(){
  return{count:0}
},
created(){
  bus.on('countChang',(count)=>{
    this.count=count
  })
}
}
</script>
一个组件：<template>
  <p>{{count}}</p>
  <button @click="addCount"></button>
</template>

<script>
  import bus from './EventBus.js'
export default {
data(){
  return{count:0}
},
methods:{
  addCount(){
   this.count++
   bus.emit('countChang',this.count)
  }
}
}
</script>
后代关系组件之间共享数据，指的是父节点的组件向其子孙组件共享数据。此时组件之间的嵌套关系比较复杂，
可以使用 provide 和 inject 实现后代关系组件之间的数据共享。
父组件发数据：export default {
data(){
  return{
    color:'red'
  }
},
provide(){
  return{
   color: this.color
}}}
接收组件：export default {
inject:['color']
}
父节点使用 provide 向下共享数据时，可以结合 computed 函数向下共享响应式的数据。示例代码如下：
响应式：import { computed } from ‘vue’
export default {
data(){
  return{
    color:'red'
  }
},
provide(){
  return{
   color: computed(()=>this.color),
}}}
如果父级节点共享的是响应式的数据，则子孙节点必须以 .value 的形式进行使用。
vuex 是终极的组件之间的数据共享方案。在企业级的 vue 项目开发中，vuex 可以让组件之间的数据共享变得高 效、清晰、且易于维护。



（四）能够知道如何在 vue3.x 的项目中全局配置 axios？
main.js
import { createApp } from 'vue'
import App from './App.vue'
import './index.css'
import './assets/css/bootstrap.css'
import axios from 'axios'
const app= createApp(App)
axios.defaults.baseURL='https://www.escook.cn'
app.globalProperties.$http=axios
app.mount('#app')

用全局axios
button @click=“postInfo”
asyns postInfo(){
const { data:res } =await this.$http.post('/api/post',{name:'zs',age:20})
console.log(res)
}






