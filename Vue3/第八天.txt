                           第八天
（一）能够说出前端路由工作的过程？
 什么是路由
路由（英文：router）就是对应关系。路由分为两大类：
① 后端路由
② 前端路由
后端路由指的是：请求方式、请求地址与 function 处理函数之间的对应关系。在 node.js 课程中，express 
路由的基本用法如下：
const express = require（"express"）
const router =express.Router()
Router.get('/api',function(res,req){})
Router.post('/api',function(res,req){})
module.exports =router
SPA 与前端路由
SPA 指的是一个 web 网站只有唯一的一个 HTML 页面，所有组件的展示与切换都在这唯一的一个页面内完成。
此时，不同组件之间的切换需要通过前端路由来实现。
结论：在 SPA 项目中，不同功能之间的切换，要依赖于前端路由来完成！
SPA 与前端路由
SPA 指的是一个 web 网站只有唯一的一个 HTML 页面，所有组件的展示与切换都在这唯一的一个页面内完成。
此时，不同组件之间的切换需要通过前端路由来实现。
结论：在 SPA 项目中，不同功能之间的切换，要依赖于前端路由来完成！
什么是前端路由
通俗易懂的概念：Hash 地址与组件之间的对应关系。
前端路由的工作方式
① 用户点击了页面上的路由链接
② 导致了 URL 地址栏中的 Hash 值发生了变化
③ 前端路由监听了到 Hash 地址的变化
④ 前端路由把当前 Hash 地址对应的组件渲染都浏览器中
结论：前端路由，指的是 Hash 地址与组件之间的对应关系！
步骤1：导入并注册 MyHome、MyMovie、MyAbout 三个组件。示例代码如下：
import MyHome from './'
import MyMovie from './'
import MyAbout from './'
export default{
components:{
MyHome,MyMovie,MyAbout
}}
步骤2：通过 <component> 标签的 is 属性，动态切换要显示的组件。示例代码如下：
<template><h1>App组件</h1><component :is="comName"></componment></template>
export default{
data(){
return{comName:"my-home"}
}}
步骤3：在组件的结构中声明如下 3 个 <a> 链接，通过点击不同的 <a> 链接，切换浏览器地址栏中的 Hash 值：
<a href="#/home">HOME</a>&nbsp;
<a href="#/movie">Movie</a>&nbsp;
<a href="#/about">About</a>
步骤4：在 created 生命周期函数中监听浏览器地址栏中 Hash 地址的变化，动态切换要展示的组件的名称：
created(){
window.onhashchange=()=>{
switch(location.hash){
case '#/home':
this.comName='my-home'
break
case '#/movie':
this.comName='my-movie'
break
case '#/about':
this.comName='my-about'
break
}}

（二） 能够知道如何在 vue3 中配置路由？
 什么是 vue-router
vue-router 是 vue.js 官方给出的路由解决方案。它只能结合 vue 项目进行使用，能够轻松的管理 SPA 项目
中组件的切换。vue-router 4.x 只能结合 vue3 进行使用
vue-router 4.x 的官方文档地址：https://next.router.vuejs.org/
 vue-router 4.x 的基本使用步骤
① 在项目中安装 vue-router  
npm install vue-router -s
② 定义路由组件
③ 声明路由链接和占位符
④ 创建路由模块
⑤ 导入并挂载路由模块
5. 编程式导航
通过调用 API 实现导航的方式，叫做编程式导航。与之对应的，通过点击链接实现导航的方式，叫做声明式导
航。例如：
⚫ 普通网页中点击 <a> 链接、vue 项目中点击 <router-link> 都属于声明式导航
⚫ 普通网页中调用 location.href 跳转到新页面的方式，属于编程式导航
vue-router 提供了许多编程式导航的 API，其中最常用的两个 API 分别是：
① this.$router.push('hash 地址')
⚫ 跳转到指定 Hash 地址，从而展示对应的组件
② this.$router.go(数值 n)
⚫ 实现导航历史的前进、后退
在创建app.vue<template>
<h1>App组件</h1>
<router-link to="/home">首页</router-link>&nbsp;
<router-link to="/movie/1">电影1</router-link>&nbsp;//用创建
<router-link to="/movie/2">电影2</router-link>&nbsp;
<router-link to="/movie/3">电影3</router-link>&nbsp;
<router-link to="/about">关于</router-link>
<router-view></router-view>
</template>

<script>
import About from './components/About.vue'
import Home from './components/Home.vue'
import Moive from './components/Moive.vue'

export default {
  name: 'App',
  components: {
About,
Home,
Moive
  }
}
</script>
<style>
  .router-link-active{
    background-color: red;
    color: white;
    font-weight: bold;
  }
</style>
创建router.js
import { createRouter, createWebHashHistory } from "vue-router";
import About from './About.vue'
import Home from './Home.vue'
import Movie from './Moive.vue'
import tab1 from './tab1.vue'
import tab2 from './tab2.vue'
const router = createRouter({
  history: createWebHashHistory(),
  linkActiveClass: 'active-router',
  routes: [
    { path: '/', redirect: 'home' },
    { path: '/home', component: Home },
    { name: 'mov', path: '/movie/:id', component: Movie, props: true },
    {
      path: '/about', component: About,
      redirect: '/about/tab1',
      children: [
        { path: 'tab1', component: tab1 },//（三） 能够知道如何使用嵌套路由？
        { path: 'tab2', component: tab2 },
      ]
    },
  ]
})
// router.beforeEach(() => {
//   console.log('ok');
// })
router.beforeEach((to, from, next) => {
  const token = localStorage.getItem('token')
  if (to.path === '/main' && !token) {
    next('/login')
  } else {
    next()
  }
})
//守卫方法
export default router


<template>

  <!-- 通过动态路由匹配的方式渲染出来的组件中，可以使用 $route.params 对象访问到动态匹配的参数值。 -->
  <div>App组件moive -- {{$route.params.id}}--{{id}}</div>
</template>

<script>
export default {
name:'MyMoive',
props:['id']////为了简化路由参数的获取形式，vue-router 允许在路由规则中开启 props 传参。
}
</script>

<style>

</style>

◆ 能够知道如何实现动态路由匹配
◆ 能够知道如何使用编程式导航
◆ 能够知道如何使用导航守卫